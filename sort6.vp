// sort6 

//; my $bW = 16;
//; my $eC = 6;
module `mname`
  (
  output logic [`$bW-1`:0] Z[`$eC-1`:0] ,
  input  logic [`$bW-1`:0] A[`$eC-1`:0] 
  );


logic [`$bW-1`:0] t [`$eC-1`:0];	// internal logic for data manipulation
logic l;
logic [`$bW-1`:0] temp;

// Sorting starts here

always_comb begin

  t[0]  = signed'(A[0]);
  t[1]  = signed'(A[1]);
  t[2]  = signed'(A[2]);
  t[3]  = signed'(A[3]);
  t[4]  = signed'(A[4]);
  t[5]  = signed'(A[5]);

l = t[0] > t[1];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[1]; 
			t[1] = t[0];
			t[0] = temp;
		end
		default : ;
endcase

l = t[0] > t[2];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[2]; 
			t[2] = t[0];
			t[0] = temp;
		end
		default : ;
endcase

l = t[0] > t[3];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[3]; 
			t[3] = t[0];
			t[0] = temp;
		end
		default : ;
endcase

l = t[0] > t[4];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[4]; 
			t[4] = t[0];
			t[0] = temp;
		end
		default : ;
endcase

l = t[0] > t[5];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[5]; 
			t[5] = t[0];
			t[0] = temp;
		end
		default : ;
endcase

//************************************************************************************//

l = t[1] > t[2];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[2]; 
			t[2] = t[1];
			t[1] = temp;
		end
		default : ;
endcase

l = t[1] > t[3];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[3]; 
			t[3] = t[1];
			t[1] = temp;
		end
		default : ;
endcase

l = t[1] > t[4];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[4]; 
			t[4] = t[1];
			t[1] = temp;
		end
		default : ;
endcase

l = t[1] > t[5];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[5]; 
			t[5] = t[1];
			t[1] = temp;
		end
		default : ;
endcase

//*************************************************************************************//

l = t[2] > t[3];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[3]; 
			t[3] = t[2];
			t[2] = temp;
		end
		default : ;
endcase

l = t[2] > t[4];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[4]; 
			t[4] = t[2];
			t[2] = temp;
		end
		default : ;
endcase

l = t[2] > t[5];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[5]; 
			t[5] = t[2];
			t[2] = temp;
		end
		default : ;
endcase

//*************************************************************************************//

l = t[3] > t[4];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[4]; 
			t[4] = t[3];
			t[3] = temp;
		end
		default : ;
endcase

l = t[3] > t[5];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[5]; 
			t[5] = t[3];
			t[3] = temp;
		end
		default : ;
endcase

//*************************************************************************************//

l = t[4] > t[5];
unique case(1'b1)
l : begin        // if l = 1'b1, it means LSB > MSB and hence we need to swap
			temp = t[5]; 
			t[5] = t[4];
			t[4] = temp;
		end
		default : ;
endcase

end

// assign the correct values to output

assign Z[0] = t[0];
assign Z[1] = t[1];
assign Z[2] = t[2];
assign Z[3] = t[3];
assign Z[4] = t[4];
assign Z[5] = t[5];


endmodule
